https://ja.vuejs.org/guide/essentials/application



🟡main.js
アプリの初期化、ルートコンポーネントの指定、プラグインの導入、マウントポイントの指定が行われる。

import { createApp } from 'vue';
import App from './App.vue';

// App.vueはVueコンポーネントの例

const app = createApp(App);

// コンポーネントやプラグインの追加
// 例: app.component('コンポーネント名', コンポーネントのオブジェクト);

// マウントポイントの指定
app.mount('#app');



🔵createApp()
Vueアプリのエントリーポイント：アプリが起動時に最初に実行されるコード
Vueアプリのインスタンスを作成している。
引数にはアプリのルートコンポーネントを渡す。

🟢１ページに複数のVueインスタンス
同じページにアプリのインスタンスが複数あってもOK。
⇒それぞれが独自の設定やグローバルアセットを備えたスコープをもつことができる。

ー　ユースケース
・マイクロフロントエンドアーキテクチャ
複数の小さなアプリを独立して開発し、それぞれのアプリを組み合わせて1つの大きなアプリを作成する際に有用。
各アプリが異なる開発チームによって作成され、独自のテクノロジースタックや開発サイクルを持つ場合、独立してマウントできるのが利点。

・ウィジェット化されたページ
ページ内の特定の領域に異なる機能やコンテンツを持つ独立したウィジェットを組み込む場合に役立つ。
各ウィジェットはそれぞれのVueアプリを持ち、異なる要素にマウントされることで独立して機能する。

・サーバーサイドレンダリング（SSR）を利用する場合
SSRを行うとき、特定のページやコンポーネントに対して異なる設定やデータを持つ複数のVueアプリを用意することがある。
各アプリは異なる設定を持ち、異なるデータを描画できる。

・独立した機能モジュール
各アプリが独立して特定の機能やモジュールを担当し、それぞれの要素に組み込む場合に有用。
⇒機能単位での独立性が確保され、メンテナンスが容易になる。



🔵App.vue
ルートコンポーネント
アプリケーション全体の構造やデザイン、他のコンポーネントの組み込みなどが行われる。



🔵mount()
アプリをDOM要素(タグ)にマウント（結びつけ）する。
⇒アプリが特定のDOM要素の中に描画され、その要素の中でVueコンポーネントが動作できるようになる。（レンダリング）
⇒データの変更やユーザーの操作に対する反応などが「#app」内で処理されるようになる。

引数として、マウントしたいDOM要素のセレクタ（例：#app）を指定する。
※#appはコンテナ要素ともいう。

返り値はルートコンポーネントインスタンス

ー　呼び出すタイミング
すべてのアプリの設定やアセットの登録が完了した後に必ず呼ばれる必要がある。

例）
// Vue.jsアプリケーションの設定
const app = createApp({
  data() {
    return {
      message: 'Hello, Vue!'
    };
  },
  methods: {
    showMessage() {
      alert(this.message);
    }
  }
});

// アセットの登録
app.component('my-component', {
  template: '<div>{{ message }}</div>',
  data() {
    return {
      message: 'I am a component!'
    };
  }
});

// アプリケーションのマウント
app.mount('#app');

