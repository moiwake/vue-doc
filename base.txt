



🟡config

nuxt.config.ts



🟡ルーティング
ディレクトリの構造に基づいて、自動でルート定義される。
pages/







コード分割
Nuxtは自動的にコードを小さな塊に分割（細分化）します。これにより、アプリケーションの初回読み込み時間を短縮することができます。



🟡SSR
SSR：ウェブページのコンテンツをサーバー上で事前に生成し、ブラウザに送信する。
⇒　ページのロード時間の短縮と、検索エンジン最適化（SEO）

Nuxt.js では別途サーバー設定を行う必要はない

メカニズム

🔵CSR（クライアントサイドレンダリング）

ユーザーがウェブページにアクセスすると、、、
①HTMLをブラウザに送信
②JavaScriptの読み込み
③ブラウザがページのコンテンツを生成

🔵SSR（サーバーサイドレンダリング）

ユーザーがウェブページにアクセスすると、、、
①リクエストをサーバーに送信
②サーバー上でNuxtがページの全コンテンツをレンダリング＆必要なデータを取得して完全に構築された状態のHTMLを生成
③レンダリングされたHTMLを直接ユーザーのブラウザに送信

🟢なぜ別途サーバーを設定する必要がないのか
Nuxtは内部的にNode.jsを使用してSSRを実行する。

ー　開発時
Nuxtが自動的に開発サーバーを設定し、起動する。

ー　本番環境
Nuxtの設定ファイルで設定

組み込みサーバー
Nuxtには独自のサーバーが組み込まれており、特別な設定は不要
＊カスタムサーバーを組み込むこともできる。




🟡自動インポート
Nuxtのデフォルトの機能で、コンポーネントや、ライブラリの関数を指定のディレクトリに配置すれば、個別にインポートする必要がなくなる。

ー　コンポーネントの自動インポート
componentsディレクトリ内に配置されたVueコンポーネントは自動的にインポートされる。
⇒　どのページやコンポーネントからもimportの記述をしなくても利用できる。

ー　プラグインの自動読み込み
pluginsディレクトリに配置されたファイルは自動的に読み込まれる。
⇒　グローバルに利用したいJavaScriptライブラリやVueプラグインが利用できる。

＊プラグインファイル内の設定によって、クライアントサイド、サーバーサイド、または両方でプラグインを有効にすることができる。


ディレクトリベースの自動インポート
Nuxtは、定義されたディレクトリに作成されたファイルを直接自動的にインポートします。

ー　コンポーザブル
composablesはVueコンポーザブルのためのディレクトリ。

ー　ヘルパー関数など
utilsはヘルパー関数やその他のユーティリティのためのディレクトリ。
